"""
Scenario for cooperative conquest game
"""

from psychsim.pwl import *
from psychsim.world import *

# Set of borders in Asia in Risk (only one direction included)
asia = {'Afghanistan': {'neighbors': {'Ural','China','India','Middle East'},
                        'value': 4},
        'China': {'neighbors': {'India','Ural','Siberia','Mongolia','Siam'},
                  'value': 4},
        'India': {'neighbors': {'Middle East','Siam'},
                  'value': 4},
        'Irkutsk': {'neighbors': {'Siberia','Yakutsk','Kamchatka','Mongolia'},
                    'value': 4},
        'Japan': {'neighbors': {'Kamchatka','Mongolia'},
                  'value': 4},
        'Kamchatka': {'neighbors': {'Yakutsk','Mongolia'},
                      'value': 4},
        'Mongolia': {'neighbors': {'Siberia'},
                     'value': 4},
        'Siberia': {'neighbors': {'Ural','Yakutsk'},
                    'value': 4}
        }
def closeRegions(regions):
    """
    Makes the links symmetric in the given region map
    @type regions: strS{->}set(str)
    """
    for orig,table in regions.items():
        for dest in table['neighbors']:
            if not regions.has_key(dest):
                regions[dest] = {'neighbors': set(),
                                 'value': 4}
            regions[dest]['neighbors'].add(orig)
    return regions

def createWorld(numPlayers,regions,starts,maxResources=32):
    world = World()

    # Create agents for human players
    players = []
    for player in range(numPlayers):
        players.append(Agent('Player%d' % (player+1)))
        world.addAgent(players[player])

    # Create agent for "enemy"
    enemy = Agent('Enemy')
    world.addAgent(enemy)

    owners = world.agents.keys()

    # Create regions
    for name,table in regions.items():
        region = Agent(name)
        world.addAgent(region)
        world.defineState(name,'occupancy',int,lo=0,hi=maxResources,
                          description='Number of resources in %s' % (region))
        region.setState('occupancy',4)
        world.defineState(name,'value',int,lo=0,hi=maxResources,
                          description='Number of resources generated by %s' % (region))
        region.setState('value',table['value'])
        world.defineState(name,'owner',set,set(owners),
                          description='Name of owner of %s' % (region))
        region.setState('owner',enemy.name)
    # Set players' initial territories
    for index in range(numPlayers):
        region = world.agents[starts[index]]
        region.setState('owner',players[index].name)
        region.setState('occupancy',16)

    # Create player actions
    for agent in players:
        for orig,destinations in regions.items():
            for dest in destinations:
                for amount in range(maxResources):
                    action = agent.addAction({'verb': 'invade','object': dest,'from': orig,
                                              'resources': amount+1})
                    agent.setLegal(action,makeTree({'if': equalRow(stateKey(orig,'owner'),agent.name),
                                                    False: False, # Can't invade from a region we don't own
                                                    True: {'if': equalRow(stateKey(dest,'owner'),enemy.name),
                                                           False: False, # Can't invade a non-enemy region
                                                           True: True}}))
    # I'm a lover, not a fighter
    agent.addAction({'verb': 'do nothing'})

    # Create region "action"
    for name in regions.keys():
        world.agents[name].addAction({'verb': 'generate'})
    
        
    # Set order of play
    world.setOrder([set([player.name for player in players]),set(regions.keys())])
    return world

if __name__ == '__main__':
    closeRegions(asia)
    world = createWorld(4,asia,['Ural','Middle East','Kamchatka','Siam'])
    world.printState()
    print world.next()
